{
    "0": {
        "text": "all right let's get started this is 682 for distributed systems so I'd like to start with just a brief explanation of what I think a distributed system is you know the core of it is a set of cooperating computers that are communicating with each other over networked to get some coherent task done and so the kinds of examples that we'll be focusing on in this class are things like storage for big websites or big data computations such as MapReduce and also somewhat more exotic things like peer-to-peer file sharing so they're all just examples the kinds of case studies we'll look at and the reason why all this is important is that a lot of critical infrastructure out there is built out of distributed systems infrastructure that requires more than one computer to get its job",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=0s"
    },
    "1": {
        "text": "done or it's sort of inherently needs to be spread out physically so the reasons why people build this stuff so first of all before I even talk about distributed systems sort of remind you that you know if you're designing a system redesigning you need to solve some problem if you can possibly solve it on a single computer you know without building a distributed system you should do it that way and there's many many jobs you can get done on a single computer and it's always easier so distributed systems you know you should try everything else before you try building distributed systems because they're not they're not simpler so the reason why people are driven to use lots of cooperating computers are they need to get high-performance and the way to think about that is they want to get achieve",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=57s"
    },
    "2": {
        "text": "some sort of parallelism lots of CPUs lots of memories lots of disk arms moving in parallel another reason why people build this stuff is to be able to tolerate faults have two computers do the exact same thing if one of them fails you can cut over to the other one another is that some problems are just naturally spread out in space like you know you want to do interbank transfers of money or something well you know bank a has this computer in New York City and Bank B as this computer in London you know you just have to have some way for them to talk to each other and cooperate in order to carry that out so there's some natural sort of physical reasons systems that are inherently physically distributed for the final reason that people build this stuff is in order to",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=105s"
    },
    "3": {
        "text": "achieve some sort of security goal so often by if there's some code you don't trust or you know you need to interact with somebody but you know they may not be immediate malicious or maybe their code has bugs in it so you don't want to have to trust it you may want to split up the computation so you know your stuff runs over there and that computer my stuff runs here on this computer and they only talk to each other to some sort of narrow narrowly defined network protocol assuming we may be worried about you know security and that's achieved by splitting things up into multiple computers so that they can be isolated the most of this course is going to be about performance and fault tolerance although the other two often work themselves in by way of the sort of",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=162s"
    },
    "4": {
        "text": "constraints on the case studies that we're going to look at you know all these distributed systems so these problems are because they have many parts and the parts execute concurrently because there are multiple computers you get all the problems that come up with concurrent programming all the sort of complex interactions and we're timing-dependent stuff and that's part of what makes distributed systems hard another thing that makes distributed systems hard is that because again you have multiple pieces plus a network you can have very unexpected failure patterns that is if you have a single computer it's usually the case either computer works or maybe it crashes or suffers a power failure or something but it pretty much either works or doesn't work distributed systems made up of lots",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=208s"
    },
    "5": {
        "text": "of computers you can have partial failures that is some pieces stopped working other people other pieces continue working or maybe the computers are working but some part of the network is broken or unreliable so partial failures is another reason why distributed systems are hard and a final reason why it's hard is that you know them the original reason to build the distributed system is often to get higher performance to get you know a thousand computers worth of performance or a thousand disk arms were the performance but it's actually very tricky to obtain that thousand X speed up with a thousand computers there's often a lot of roadblocks thrown in your way so the Elven takes a bit of careful design to make the system actually give you the performance you feel you deserve",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=254s"
    },
    "6": {
        "text": "so solving these problems of course going to be all about you know addressing these issues the reason to take the course is because often the problems and the solutions are quite just technically interesting they're hard problems for some of these problems there's pretty good solutions known for other problems they're not such great solutions now distributed systems are used by a lot of real-world systems out there like big websites often involved you know vast numbers computers that are you know put together as distributed systems when I first started teaching this course it was distributed systems were something of an academic curiosity you know people thought oh you know at a small scale they were used sometimes and people felt that oh someday they'd be might be important but now particularly",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=324s"
    },
    "7": {
        "text": "driven by the rise of giant websites that have you know vast amounts of data and entire warehouses full of computers distributed systems in the last twenty years have gotten to be very seriously important part of computing infrastructure this means that there's been a lot of attention paid to them a lot of problems have been solved but there's still quite a few unsolved problems so if you're a graduate student or you're interested in research there's a lot to you let a lot of problems yet to be solved in distributed systems that you could look into his research and finally if you like building stuff this is a good class because it has a lab sequence in which you'll construct some fairly realistic distributed systems focused on performance and fault tolerance so you've got a lot of practice building",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=374s"
    },
    "8": {
        "text": "districts just building distributed systems and making them work all right let me talk about course structure a bit before I get started on real technical content you should be able to find the course website using Google and on the course website is the lab assignments and course schedule and also link to a Piazza page where you can post questions get answers the course staff I'm Robert Morris I'll be giving the lectures I also have for TAS you guys want to stand up and show your faces the TAS are experts at in particular at doing the solving the labs they'll be holding office hours so if you have questions about the labs you can come you should go to office hours or you could post questions to Piazza the course has a couple of important components one is this lectures there's a paper for almost",
        "source": "https:\/\/www.youtube.com\/watch?v=cQP8WApzIQQ&t=424s"
    }
}